---
import Layout from "../layouts/Layout.astro"
import SectionContainer from "../components/SectionContainer.astro"
import Plus from "../components/icons/Plus.astro"
import Minus from "../components/icons/Minus.astro"
import ChevronRigth from "../components/icons/ChevronRigth.astro"

import { roses } from "../data/roses"
---

<Layout title="Elige tus rosas">
    <main class="flex flex-col w-full justify-center items-center text-center px-4 pt-20 space-y-10">
        <SectionContainer>
            <h2 class="text-3xl font-semibold">Elige las rosas que quieres enviar a esa persona especial</h2>
            <div class="text-xs text-stone-400 flex flex-col items-start justify-center"> 
                <p>1 rosa x $2.000</p>
                <p>3 rosas x $5.000</p>
            </div>

            <div class="grid md:grid-cols-3 grid-cols-2 gap-x-4 gap-y-10 text-balance">
                {
                    roses.map(({ title, description, img }) => (
                        <div class="md:w-52 w-44 md:h-72 h-64 flex flex-col items-center justify-start space-y-2 text-pretty bg-neutral-950/80 hover:bg-neutral-950/40 rounded-2xl touch-manipulation">
                            <img src={img} alt={title} class="md:w-52 w-44 min-h-32 md:min-h-36 object-cover rounded-2xl"/>
                            <div class="flex flex-col justify-between h-full touch-manipulation">
                                <div class="space-y-1 touch-manipulation">
                                    <p class="text-sm font-semibold">{title}</p>
                                    <p class="text-xs">{description}</p>
                                </div>

                                <!-- Botones de aumentar y decrementar cantidad de rosas -->
                                <div class="flex flex-row items-center justify-center space-x-2 text-center pb-3 touch-manipulation">
                                    <button id={`btn-minus-${title}`} class="bg-purple-600/30 rounded-md p-1 touch-manipulation"> <Minus class="size-4 text-xl font-black"/> </button>
                                    <input type="text" placeholder="0" disabled id={`input-${title}`} class="w-12 px-4 rounded-lg text-center"/>
                                    <button id={`btn-plus-${title}`} class="bg-purple-600/30 rounded-md p-1 touch-manipulation"> <Plus class="size-4 text-xl font-black"/> </button>
                                </div>
                            </div>
                        </div>
                    ))
                }
            </div>
        </SectionContainer>

        <!-- Bottom sheet para mostrar un resumen y los botones de continuar con o sin foto -->
        <section id="bottom-sheet" class="md:w-3/5 w-full sticky bottom-5 flex flex-col justify-center gap-y-10 p-4 rounded-3xl bg-neutral-950/70 backdrop-blur-lg shadow-xl shadow-black ease-out transition-all translate-y-24 opacity-0 ">
            <div class="flex flex-row items-center justify-between">
                <div class="text-xs text-stone-400 flex flex-col items-start justify-center"> 
                    <p>1 rosa x $2000</p>
                    <p>3 rosas x $5000</p>
                </div>
                <div class="flex flex-col items-end justify-end gap-2">
                    <p class="text-xs font-semibold">Rosas seleccionadas: <span id="total-roses"></span></p>
                    <p class="font-bold">Total: $<span id="total-to-pay"></span></p>
                </div>
            </div>

            <div class="flex justify-around items-center">
                <div id="button-without-foto">
                    <button><a href="/data" class="bg-gradient-to-r from-purple-800 via-purple-500 to-purple-800 text-transparent bg-clip-text font-bold">No agregar foto</a></button>
                </div>
                <div>
                    <button><a href="/photo" class="flex items-center justify-center py-3 px-5 bg-gradient-to-r from-purple-950/70 via-purple-900/80 to-purple-950/80 rounded-xl font-bold backdrop-blur-xs">Agregar foto<ChevronRigth class="size-6"/></a></button>
                </div>
            </div>
        </section>
    </main>
</Layout>

<script>
    import { roses } from "../data/roses";
    import { addCartItem, cartItems, updateCart } from "../stores/cartStore";

    document.addEventListener("DOMContentLoaded", () => {
        const btnNext = document.getElementById("bottom-sheet") as HTMLElement;
        const totalOfRoses = document.getElementById("total-roses") as HTMLElement;
        const totalToPayElement = document.getElementById("total-to-pay") as HTMLElement;
        const buttonWithoutFoto = document.getElementById('button-without-foto') as HTMLButtonElement;

        const currentCart = cartItems.get();

        buttonWithoutFoto.addEventListener('click', () => { 
            updateCart(currentCart);
        });

        // Sincronizar el carrito al cargar la página
        function syncCartWithUI() {
            currentCart.forEach(item => {
                const input = document.getElementById(`input-${item.title}`) as HTMLInputElement;
                if (input) {
                    input.value = item.quantity.toString();
                }
            });
        }

        // Función para comprobar si los inputs tienen valores válidos (distintos de "0" o vacíos)
        function checkInputs() {
            let showButton = false;
            
            roses.forEach(({ title }) => {
                const input = document.getElementById(`input-${title}`) as HTMLInputElement;
                if (input && input.value !== "" && parseInt(input.value) > 0) {
                    showButton = true; 
                }
            });

            if (showButton) {
                btnNext.classList.remove("opacity-0");
                btnNext.classList.remove("translate-y-24");
                btnNext.classList.add("translate-y-0");
            } else {
                btnNext.classList.remove("translate-y-0");
                btnNext.classList.add("translate-y-24");
                btnNext.classList.add("opacity-0");
            }
        }

        // Función para actualizar el pedido en el carrito global
        function updatePedido(title: string, quantity: number) {
            if (quantity > 0) {
                addCartItem({ title, quantity }); // Solo actualiza si la cantidad es mayor a 0
            } else {
                // Eliminar el ítem si la cantidad es 0
                const updatedCart = cartItems.get().filter(item => item.title !== title);
                updateCart(updatedCart);
            }
            calculateTotal();
        }

        // Función para calcular el total de rosas seleccionadas y el total a pagar
        function calculateTotal() {
            const currentCart = cartItems.get();
            const filteredCart = currentCart.filter(item => item.title !== "Rosa con dedicatoria");

            const totalRoses = filteredCart.reduce((acc, pedido) => acc + pedido.quantity, 0);
            let totalToPay = 0;

            if (totalRoses >= 3) {
                const fullSetsOfThree = Math.floor(totalRoses / 3); 
                const remainingRoses = totalRoses % 3; 
                
                totalToPay = fullSetsOfThree * 5000 + remainingRoses * 2000;
            } else {
                totalToPay = totalRoses * 2000;
            }

            totalOfRoses.innerHTML = totalRoses.toString();
            totalToPayElement.innerHTML = totalToPay.toString();
        }

        roses.forEach(({ title }) => {
            const btnPlus = document.getElementById(`btn-plus-${title}`) as HTMLButtonElement;
            const btnMinus = document.getElementById(`btn-minus-${title}`) as HTMLButtonElement;
            const input = document.getElementById(`input-${title}`) as HTMLInputElement;

            if (!btnPlus || !btnMinus || !input) return;

            const currentItem = currentCart.find(item => item.title === title);
            let quantity = currentItem ? currentItem.quantity : 0;

            input.value = quantity.toString();

            btnPlus.addEventListener("click", () => {
                quantity++;
                input.value = quantity.toString();
                updatePedido(title, quantity);
                checkInputs();
            });

            btnMinus.addEventListener("click", () => {
                quantity--;
                if (quantity < 0) quantity = 0; // Evitar números negativos
                input.value = quantity.toString();
                updatePedido(title, quantity); // Si es 0, se elimina el ítem
                checkInputs();
            });
        });

        // Al cargar la página, sincronizar el carrito y calcular el total
        syncCartWithUI();
        calculateTotal();
        checkInputs();
    });
</script>
